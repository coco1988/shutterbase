// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/batch"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ImageUpdate) SetUpdatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetThumbnailID sets the "thumbnail_id" field.
func (iu *ImageUpdate) SetThumbnailID(u uuid.UUID) *ImageUpdate {
	iu.mutation.SetThumbnailID(u)
	return iu
}

// SetNillableThumbnailID sets the "thumbnail_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableThumbnailID(u *uuid.UUID) *ImageUpdate {
	if u != nil {
		iu.SetThumbnailID(*u)
	}
	return iu
}

// ClearThumbnailID clears the value of the "thumbnail_id" field.
func (iu *ImageUpdate) ClearThumbnailID() *ImageUpdate {
	iu.mutation.ClearThumbnailID()
	return iu
}

// SetFileName sets the "file_name" field.
func (iu *ImageUpdate) SetFileName(s string) *ImageUpdate {
	iu.mutation.SetFileName(s)
	return iu
}

// SetDescription sets the "description" field.
func (iu *ImageUpdate) SetDescription(s string) *ImageUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableDescription(s *string) *ImageUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetExifData sets the "exif_data" field.
func (iu *ImageUpdate) SetExifData(m map[string]interface{}) *ImageUpdate {
	iu.mutation.SetExifData(m)
	return iu
}

// SetCapturedAt sets the "captured_at" field.
func (iu *ImageUpdate) SetCapturedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetCapturedAt(t)
	return iu
}

// SetNillableCapturedAt sets the "captured_at" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCapturedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetCapturedAt(*t)
	}
	return iu
}

// ClearCapturedAt clears the value of the "captured_at" field.
func (iu *ImageUpdate) ClearCapturedAt() *ImageUpdate {
	iu.mutation.ClearCapturedAt()
	return iu
}

// SetCapturedAtCorrected sets the "captured_at_corrected" field.
func (iu *ImageUpdate) SetCapturedAtCorrected(t time.Time) *ImageUpdate {
	iu.mutation.SetCapturedAtCorrected(t)
	return iu
}

// SetNillableCapturedAtCorrected sets the "captured_at_corrected" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCapturedAtCorrected(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetCapturedAtCorrected(*t)
	}
	return iu
}

// ClearCapturedAtCorrected clears the value of the "captured_at_corrected" field.
func (iu *ImageUpdate) ClearCapturedAtCorrected() *ImageUpdate {
	iu.mutation.ClearCapturedAtCorrected()
	return iu
}

// AddTagIDs adds the "tags" edge to the ImageTag entity by IDs.
func (iu *ImageUpdate) AddTagIDs(ids ...uuid.UUID) *ImageUpdate {
	iu.mutation.AddTagIDs(ids...)
	return iu
}

// AddTags adds the "tags" edges to the ImageTag entity.
func (iu *ImageUpdate) AddTags(i ...*ImageTag) *ImageUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddTagIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *ImageUpdate) SetUserID(id uuid.UUID) *ImageUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *ImageUpdate) SetUser(u *User) *ImageUpdate {
	return iu.SetUserID(u.ID)
}

// SetBatchID sets the "batch" edge to the Batch entity by ID.
func (iu *ImageUpdate) SetBatchID(id uuid.UUID) *ImageUpdate {
	iu.mutation.SetBatchID(id)
	return iu
}

// SetBatch sets the "batch" edge to the Batch entity.
func (iu *ImageUpdate) SetBatch(b *Batch) *ImageUpdate {
	return iu.SetBatchID(b.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (iu *ImageUpdate) SetProjectID(id uuid.UUID) *ImageUpdate {
	iu.mutation.SetProjectID(id)
	return iu
}

// SetProject sets the "project" edge to the Project entity.
func (iu *ImageUpdate) SetProject(p *Project) *ImageUpdate {
	return iu.SetProjectID(p.ID)
}

// SetCameraID sets the "camera" edge to the Camera entity by ID.
func (iu *ImageUpdate) SetCameraID(id uuid.UUID) *ImageUpdate {
	iu.mutation.SetCameraID(id)
	return iu
}

// SetCamera sets the "camera" edge to the Camera entity.
func (iu *ImageUpdate) SetCamera(c *Camera) *ImageUpdate {
	return iu.SetCameraID(c.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (iu *ImageUpdate) SetCreatedByID(id uuid.UUID) *ImageUpdate {
	iu.mutation.SetCreatedByID(id)
	return iu
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (iu *ImageUpdate) SetNillableCreatedByID(id *uuid.UUID) *ImageUpdate {
	if id != nil {
		iu = iu.SetCreatedByID(*id)
	}
	return iu
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (iu *ImageUpdate) SetCreatedBy(u *User) *ImageUpdate {
	return iu.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (iu *ImageUpdate) SetUpdatedByID(id uuid.UUID) *ImageUpdate {
	iu.mutation.SetUpdatedByID(id)
	return iu
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (iu *ImageUpdate) SetNillableUpdatedByID(id *uuid.UUID) *ImageUpdate {
	if id != nil {
		iu = iu.SetUpdatedByID(*id)
	}
	return iu
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (iu *ImageUpdate) SetUpdatedBy(u *User) *ImageUpdate {
	return iu.SetUpdatedByID(u.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearTags clears all "tags" edges to the ImageTag entity.
func (iu *ImageUpdate) ClearTags() *ImageUpdate {
	iu.mutation.ClearTags()
	return iu
}

// RemoveTagIDs removes the "tags" edge to ImageTag entities by IDs.
func (iu *ImageUpdate) RemoveTagIDs(ids ...uuid.UUID) *ImageUpdate {
	iu.mutation.RemoveTagIDs(ids...)
	return iu
}

// RemoveTags removes "tags" edges to ImageTag entities.
func (iu *ImageUpdate) RemoveTags(i ...*ImageTag) *ImageUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveTagIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (iu *ImageUpdate) ClearUser() *ImageUpdate {
	iu.mutation.ClearUser()
	return iu
}

// ClearBatch clears the "batch" edge to the Batch entity.
func (iu *ImageUpdate) ClearBatch() *ImageUpdate {
	iu.mutation.ClearBatch()
	return iu
}

// ClearProject clears the "project" edge to the Project entity.
func (iu *ImageUpdate) ClearProject() *ImageUpdate {
	iu.mutation.ClearProject()
	return iu
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (iu *ImageUpdate) ClearCamera() *ImageUpdate {
	iu.mutation.ClearCamera()
	return iu
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (iu *ImageUpdate) ClearCreatedBy() *ImageUpdate {
	iu.mutation.ClearCreatedBy()
	return iu
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (iu *ImageUpdate) ClearUpdatedBy() *ImageUpdate {
	iu.mutation.ClearUpdatedBy()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ImageUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := image.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImageUpdate) check() error {
	if v, ok := iu.mutation.FileName(); ok {
		if err := image.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Image.file_name": %w`, err)}
		}
	}
	if _, ok := iu.mutation.UserID(); iu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.user"`)
	}
	if _, ok := iu.mutation.BatchID(); iu.mutation.BatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.batch"`)
	}
	if _, ok := iu.mutation.ProjectID(); iu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.project"`)
	}
	if _, ok := iu.mutation.CameraID(); iu.mutation.CameraCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.camera"`)
	}
	return nil
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.ThumbnailID(); ok {
		_spec.SetField(image.FieldThumbnailID, field.TypeUUID, value)
	}
	if iu.mutation.ThumbnailIDCleared() {
		_spec.ClearField(image.FieldThumbnailID, field.TypeUUID)
	}
	if value, ok := iu.mutation.FileName(); ok {
		_spec.SetField(image.FieldFileName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(image.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.ExifData(); ok {
		_spec.SetField(image.FieldExifData, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.CapturedAt(); ok {
		_spec.SetField(image.FieldCapturedAt, field.TypeTime, value)
	}
	if iu.mutation.CapturedAtCleared() {
		_spec.ClearField(image.FieldCapturedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.CapturedAtCorrected(); ok {
		_spec.SetField(image.FieldCapturedAtCorrected, field.TypeTime, value)
	}
	if iu.mutation.CapturedAtCorrectedCleared() {
		_spec.ClearField(image.FieldCapturedAtCorrected, field.TypeTime)
	}
	if iu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.TagsTable,
			Columns: image.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !iu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.TagsTable,
			Columns: image.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.TagsTable,
			Columns: image.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.BatchTable,
			Columns: []string{image.BatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.BatchTable,
			Columns: []string{image.BatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.ProjectTable,
			Columns: []string{image.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.ProjectTable,
			Columns: []string{image.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CameraTable,
			Columns: []string{image.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CameraTable,
			Columns: []string{image.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CreatedByTable,
			Columns: []string{image.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CreatedByTable,
			Columns: []string{image.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UpdatedByTable,
			Columns: []string{image.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UpdatedByTable,
			Columns: []string{image.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ImageUpdateOne) SetUpdatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetThumbnailID sets the "thumbnail_id" field.
func (iuo *ImageUpdateOne) SetThumbnailID(u uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetThumbnailID(u)
	return iuo
}

// SetNillableThumbnailID sets the "thumbnail_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableThumbnailID(u *uuid.UUID) *ImageUpdateOne {
	if u != nil {
		iuo.SetThumbnailID(*u)
	}
	return iuo
}

// ClearThumbnailID clears the value of the "thumbnail_id" field.
func (iuo *ImageUpdateOne) ClearThumbnailID() *ImageUpdateOne {
	iuo.mutation.ClearThumbnailID()
	return iuo
}

// SetFileName sets the "file_name" field.
func (iuo *ImageUpdateOne) SetFileName(s string) *ImageUpdateOne {
	iuo.mutation.SetFileName(s)
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *ImageUpdateOne) SetDescription(s string) *ImageUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableDescription(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetExifData sets the "exif_data" field.
func (iuo *ImageUpdateOne) SetExifData(m map[string]interface{}) *ImageUpdateOne {
	iuo.mutation.SetExifData(m)
	return iuo
}

// SetCapturedAt sets the "captured_at" field.
func (iuo *ImageUpdateOne) SetCapturedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetCapturedAt(t)
	return iuo
}

// SetNillableCapturedAt sets the "captured_at" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCapturedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetCapturedAt(*t)
	}
	return iuo
}

// ClearCapturedAt clears the value of the "captured_at" field.
func (iuo *ImageUpdateOne) ClearCapturedAt() *ImageUpdateOne {
	iuo.mutation.ClearCapturedAt()
	return iuo
}

// SetCapturedAtCorrected sets the "captured_at_corrected" field.
func (iuo *ImageUpdateOne) SetCapturedAtCorrected(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetCapturedAtCorrected(t)
	return iuo
}

// SetNillableCapturedAtCorrected sets the "captured_at_corrected" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCapturedAtCorrected(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetCapturedAtCorrected(*t)
	}
	return iuo
}

// ClearCapturedAtCorrected clears the value of the "captured_at_corrected" field.
func (iuo *ImageUpdateOne) ClearCapturedAtCorrected() *ImageUpdateOne {
	iuo.mutation.ClearCapturedAtCorrected()
	return iuo
}

// AddTagIDs adds the "tags" edge to the ImageTag entity by IDs.
func (iuo *ImageUpdateOne) AddTagIDs(ids ...uuid.UUID) *ImageUpdateOne {
	iuo.mutation.AddTagIDs(ids...)
	return iuo
}

// AddTags adds the "tags" edges to the ImageTag entity.
func (iuo *ImageUpdateOne) AddTags(i ...*ImageTag) *ImageUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddTagIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *ImageUpdateOne) SetUserID(id uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *ImageUpdateOne) SetUser(u *User) *ImageUpdateOne {
	return iuo.SetUserID(u.ID)
}

// SetBatchID sets the "batch" edge to the Batch entity by ID.
func (iuo *ImageUpdateOne) SetBatchID(id uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetBatchID(id)
	return iuo
}

// SetBatch sets the "batch" edge to the Batch entity.
func (iuo *ImageUpdateOne) SetBatch(b *Batch) *ImageUpdateOne {
	return iuo.SetBatchID(b.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (iuo *ImageUpdateOne) SetProjectID(id uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetProjectID(id)
	return iuo
}

// SetProject sets the "project" edge to the Project entity.
func (iuo *ImageUpdateOne) SetProject(p *Project) *ImageUpdateOne {
	return iuo.SetProjectID(p.ID)
}

// SetCameraID sets the "camera" edge to the Camera entity by ID.
func (iuo *ImageUpdateOne) SetCameraID(id uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetCameraID(id)
	return iuo
}

// SetCamera sets the "camera" edge to the Camera entity.
func (iuo *ImageUpdateOne) SetCamera(c *Camera) *ImageUpdateOne {
	return iuo.SetCameraID(c.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (iuo *ImageUpdateOne) SetCreatedByID(id uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetCreatedByID(id)
	return iuo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCreatedByID(id *uuid.UUID) *ImageUpdateOne {
	if id != nil {
		iuo = iuo.SetCreatedByID(*id)
	}
	return iuo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (iuo *ImageUpdateOne) SetCreatedBy(u *User) *ImageUpdateOne {
	return iuo.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (iuo *ImageUpdateOne) SetUpdatedByID(id uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetUpdatedByID(id)
	return iuo
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableUpdatedByID(id *uuid.UUID) *ImageUpdateOne {
	if id != nil {
		iuo = iuo.SetUpdatedByID(*id)
	}
	return iuo
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (iuo *ImageUpdateOne) SetUpdatedBy(u *User) *ImageUpdateOne {
	return iuo.SetUpdatedByID(u.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearTags clears all "tags" edges to the ImageTag entity.
func (iuo *ImageUpdateOne) ClearTags() *ImageUpdateOne {
	iuo.mutation.ClearTags()
	return iuo
}

// RemoveTagIDs removes the "tags" edge to ImageTag entities by IDs.
func (iuo *ImageUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *ImageUpdateOne {
	iuo.mutation.RemoveTagIDs(ids...)
	return iuo
}

// RemoveTags removes "tags" edges to ImageTag entities.
func (iuo *ImageUpdateOne) RemoveTags(i ...*ImageTag) *ImageUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveTagIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *ImageUpdateOne) ClearUser() *ImageUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// ClearBatch clears the "batch" edge to the Batch entity.
func (iuo *ImageUpdateOne) ClearBatch() *ImageUpdateOne {
	iuo.mutation.ClearBatch()
	return iuo
}

// ClearProject clears the "project" edge to the Project entity.
func (iuo *ImageUpdateOne) ClearProject() *ImageUpdateOne {
	iuo.mutation.ClearProject()
	return iuo
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (iuo *ImageUpdateOne) ClearCamera() *ImageUpdateOne {
	iuo.mutation.ClearCamera()
	return iuo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (iuo *ImageUpdateOne) ClearCreatedBy() *ImageUpdateOne {
	iuo.mutation.ClearCreatedBy()
	return iuo
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (iuo *ImageUpdateOne) ClearUpdatedBy() *ImageUpdateOne {
	iuo.mutation.ClearUpdatedBy()
	return iuo
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ImageUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := image.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImageUpdateOne) check() error {
	if v, ok := iuo.mutation.FileName(); ok {
		if err := image.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Image.file_name": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.UserID(); iuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.user"`)
	}
	if _, ok := iuo.mutation.BatchID(); iuo.mutation.BatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.batch"`)
	}
	if _, ok := iuo.mutation.ProjectID(); iuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.project"`)
	}
	if _, ok := iuo.mutation.CameraID(); iuo.mutation.CameraCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.camera"`)
	}
	return nil
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.ThumbnailID(); ok {
		_spec.SetField(image.FieldThumbnailID, field.TypeUUID, value)
	}
	if iuo.mutation.ThumbnailIDCleared() {
		_spec.ClearField(image.FieldThumbnailID, field.TypeUUID)
	}
	if value, ok := iuo.mutation.FileName(); ok {
		_spec.SetField(image.FieldFileName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(image.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ExifData(); ok {
		_spec.SetField(image.FieldExifData, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.CapturedAt(); ok {
		_spec.SetField(image.FieldCapturedAt, field.TypeTime, value)
	}
	if iuo.mutation.CapturedAtCleared() {
		_spec.ClearField(image.FieldCapturedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.CapturedAtCorrected(); ok {
		_spec.SetField(image.FieldCapturedAtCorrected, field.TypeTime, value)
	}
	if iuo.mutation.CapturedAtCorrectedCleared() {
		_spec.ClearField(image.FieldCapturedAtCorrected, field.TypeTime)
	}
	if iuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.TagsTable,
			Columns: image.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !iuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.TagsTable,
			Columns: image.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.TagsTable,
			Columns: image.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.BatchTable,
			Columns: []string{image.BatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.BatchTable,
			Columns: []string{image.BatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.ProjectTable,
			Columns: []string{image.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.ProjectTable,
			Columns: []string{image.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CameraTable,
			Columns: []string{image.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CameraTable,
			Columns: []string{image.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CreatedByTable,
			Columns: []string{image.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.CreatedByTable,
			Columns: []string{image.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UpdatedByTable,
			Columns: []string{image.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   image.UpdatedByTable,
			Columns: []string{image.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
