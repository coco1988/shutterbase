# Docker build and push workflow
# Requires Organization/Repo secrets:
# - DOCKERHUB_USERNAME
# - DOCKERHUB_TOKEN (retrieve here: https://hub.docker.com/settings/security)
# It is assumed, that your GH Organization name is the same as your Dockerhub organization name.

name: Build API

on:
  release:
    types: [published]
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Docker test build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@master
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: api
          push: false
          tags: ${{ github.repository_owner }}/api:${{ github.sha }}
  build:
    name: Docker build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@master
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: api
          push: true
          tags: ${{ github.repository_owner }}/api:${{ github.sha }}

  push:
    name: Docker build release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@master
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: api
          build-args: |
            RELEASE_VERSION=@${{ github.event.release.tag_name }}
          push: true
          tags: ${{ github.repository_owner }}/api:latest, ${{ github.repository_owner }}/api:${{ github.event.release.tag_name }}
